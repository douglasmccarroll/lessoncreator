<?xml version = "1.0" encoding = "utf-8"?>
<view:ViewBase xmlns:fx = "http://ns.adobe.com/mxml/2009"
               xmlns:mx = "library://ns.adobe.com/flex/mx"
               xmlns:s = "library://ns.adobe.com/flex/spark"
               xmlns:view = "com.brightworks.lessoncreator.view.*"
               creationComplete = "onCreationComplete()">

   <fx:Script>
      <![CDATA[
       import com.brightworks.component.itemrenderer.ItemRenderer_Grid_SelectableCheckbox;
       import com.brightworks.lessoncreator.constants.Constants_ApplicationState;
       import com.brightworks.lessoncreator.constants.Constants_Language;
       import com.brightworks.lessoncreator.constants.Constants_ProductionScript;
       import com.brightworks.lessoncreator.constants.Constants_ProductionScript;
       import com.brightworks.lessoncreator.model.LessonDevFolder;
       import com.brightworks.lessoncreator.model.MainModel;
       import com.brightworks.lessoncreator.model.ProductionScript;
       import com.brightworks.lessoncreator.model.ProductionScriptLessonOrRoleItem;
       import com.brightworks.lessoncreator.model.VoiceTalent;
       import com.brightworks.util.Log;
       import com.brightworks.util.Utils_DateTime;
       import com.brightworks.util.Utils_File;

       import mx.collections.ArrayCollection;

       import spark.collections.Sort;
       import spark.collections.SortField;
       import spark.components.gridClasses.GridColumn;

       private var _currentLanguageIso639_3Code_Native:String = Constants_Language.ISO_639_3_CODE__ENG; // TODO
       private var _currentLanguageIso639_3Code_Target:String = Constants_Language.ISO_639_3_CODE__CMN; // TODO
       private var _currentLessonDevFolderList:ArrayCollection;
       [Bindable]
       private var _languageDropDownListDataProvider:ArrayCollection;
       [Bindable]
       private var _lessonAndRoleDataGridDataProvider:ArrayCollection;
       private var _previousSelectedLanguageIso639_3Code:String;
       private var _previousSelectedRoleSelectionMode:String;
       private var _previousSelectedScriptType:String;
       private var _previousSelectedVoiceTalent:VoiceTalent;
       [Bindable]
       private var _roleSelectionModeDropDownListDataProvider:ArrayCollection;
       [Bindable]
       private var _scriptTypeDropDownListDataProvider:ArrayCollection;
       [Bindable]
       private var _voiceTalentDropDownListDataProvider:ArrayCollection;

       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //
       //          Getters / Setters
       //
       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

       private function get _selectedLanguageIso639_3Code():String {
           if ((!languageDropDownList) || (!languageDropDownList.selectedItem))
               return null;
           var result:String = languageDropDownList.selectedItem["value"];
           return result;
       }

       private function get _selectedRoleSelectionMode():String {
           if ((!roleSelectionModeDropDownList) || (!roleSelectionModeDropDownList.selectedItem))
               return null;
           var result:String = roleSelectionModeDropDownList.selectedItem["value"];
           return result;
       }

       private function get _selectedScriptType():String {
           if ((!scriptTypeDropDownList) || (!scriptTypeDropDownList.selectedItem))
               return null;
           var result:String = scriptTypeDropDownList.selectedItem["value"];
           return result;
       }

       private function get _selectedVoiceTalent():VoiceTalent {
           if ((!voiceTalentDropDownList) || (!voiceTalentDropDownList.selectedItem))
               return null;
           var result:VoiceTalent = voiceTalentDropDownList.selectedItem["value"];
           return result;
       }

       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //
       //          Protected Methods
       //
       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

       override protected function onApplicationStateChange(newValue:String):void {
           switch (model.applicationState) {
               case Constants_ApplicationState.APPLICATION_STATE__PRIMARY__CREATE_PRODUCTION_SCRIPTS:
                   _currentLessonDevFolderList = null;
                   callLater(updateCurrentLessonDevFolderList);
                   updateUI();
                   break;
               default:
                   if (mainGroup)
                       mainGroup.visible = false;
           }
       }

       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //
       //          Private Methods
       //
       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

       private function getLessonAndRoleDataGridSelectedItems():ArrayCollection {
           var result:ArrayCollection = new ArrayCollection();
           for each (var item:ProductionScriptLessonOrRoleItem in _lessonAndRoleDataGridDataProvider) {
               if (item.isSelected)
                   result.addItem(item);
           }
           return result;
       }

       private function initializeLanguageDropDownListDataProvider():void {
           _languageDropDownListDataProvider = new ArrayCollection();
           var sort:Sort = new Sort();
           sort.fields = [new SortField("label")];
           _languageDropDownListDataProvider.sort = sort;
           _languageDropDownListDataProvider.refresh();
           var displayName:String = Constants_Language.getDisplayNameForIso639_3Code(_currentLanguageIso639_3Code_Native);
           _languageDropDownListDataProvider.addItem({label: displayName, value: _currentLanguageIso639_3Code_Native});
           displayName = Constants_Language.getDisplayNameForIso639_3Code(_currentLanguageIso639_3Code_Target);
           _languageDropDownListDataProvider.addItem({label: displayName, value: _currentLanguageIso639_3Code_Target});
           languageDropDownList.dataProvider = _languageDropDownListDataProvider;
       }

       private function initializeRoleSelectionModeDropDownListDataProvider():void {
           _roleSelectionModeDropDownListDataProvider = new ArrayCollection();
           var sort:Sort = new Sort();
           sort.fields = [new SortField("label")];
           _roleSelectionModeDropDownListDataProvider.sort = sort;
           _roleSelectionModeDropDownListDataProvider.refresh();
           _roleSelectionModeDropDownListDataProvider.addItem({
               label: Constants_ProductionScript.ROLE_SELECTION_MODE__DISPLAY_NAME__ALL_ROLES,
               value: Constants_ProductionScript.ROLE_SELECTION_MODE__ALL_ROLES
           });
           _roleSelectionModeDropDownListDataProvider.addItem({
               label: Constants_ProductionScript.ROLE_SELECTION_MODE__DISPLAY_NAME__SELECTED_ROLES_FOR_EACH_LESSON,
               value: Constants_ProductionScript.ROLE_SELECTION_MODE__SELECTED_ROLES_FOR_EACH_LESSON
           });
           roleSelectionModeDropDownList.dataProvider = _roleSelectionModeDropDownListDataProvider;
       }

       private function initializeScriptTypeDropDownListDataProvider():void {
           _scriptTypeDropDownListDataProvider = new ArrayCollection();
           var sort:Sort = new Sort();
           sort.fields = [new SortField("label")];
           _scriptTypeDropDownListDataProvider.sort = sort;
           _scriptTypeDropDownListDataProvider.refresh();
           _scriptTypeDropDownListDataProvider.addItem({
               label: Constants_ProductionScript.SCRIPT_TYPE__DISPLAY_NAME__AUDIO_CHECKING_AND_EDITING,
               value: Constants_ProductionScript.SCRIPT_TYPE__AUDIO_CHECKING_AND_EDITING
           });
           _scriptTypeDropDownListDataProvider.addItem({
               label: Constants_ProductionScript.SCRIPT_TYPE__DISPLAY_NAME__AUDIO_RECORDING,
               value: Constants_ProductionScript.SCRIPT_TYPE__AUDIO_RECORDING
           });
           _scriptTypeDropDownListDataProvider.addItem({
               label: Constants_ProductionScript.SCRIPT_TYPE__DISPLAY_NAME__FINAL_ALPHA_CHECK,
               value: Constants_ProductionScript.SCRIPT_TYPE__FINAL_ALPHA_CHECK
           });
           scriptTypeDropDownList.dataProvider = _scriptTypeDropDownListDataProvider;
       }

       private function initializeVoiceTalentDropDownListDataProvider():void {
           _voiceTalentDropDownListDataProvider = new ArrayCollection();
           var sort:Sort = new Sort();
           sort.fields = [new SortField("label")];
           _voiceTalentDropDownListDataProvider.sort = sort;
           _voiceTalentDropDownListDataProvider.refresh();
           for each (var voiceTalent:VoiceTalent in model.voiceTalentList) {
               _voiceTalentDropDownListDataProvider.addItem({
                   label: voiceTalent.name_Display__FamilyCommaSpaceGiven,
                   value: voiceTalent
               });
           }
           voiceTalentDropDownList.dataProvider = _voiceTalentDropDownListDataProvider;
       }

       private function labelFunction_RoleColumn(item:Object, column:GridColumn):String {
           if (ProductionScriptLessonOrRoleItem(item).isLessonScriptHasProblems) {
               return "";
           } else {
               return ProductionScriptLessonOrRoleItem(item).roleName;
           }
       }

       private function onCreateScriptButtonClick():void {
           // create a ProductionScript, then use it to create the script text
           var productionScript:ProductionScript =
                   new ProductionScript(
                           _selectedScriptType,
                           getLessonAndRoleDataGridSelectedItems(),
                           _currentLanguageIso639_3Code_Native,
                           _currentLanguageIso639_3Code_Target,
                           _selectedLanguageIso639_3Code,
                           _selectedRoleSelectionMode,
                           _selectedVoiceTalent);
           var scriptText:String = productionScript.scriptText;
           Clipboard.generalClipboard.clear();
           Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, scriptText);
           scriptDisplayTextArea.text = scriptText;
       }

       private function onCreationComplete():void {
           initializeLanguageDropDownListDataProvider();
           initializeRoleSelectionModeDropDownListDataProvider();
           initializeScriptTypeDropDownListDataProvider();
           initializeVoiceTalentDropDownListDataProvider();
       }

       private function onLanguageDropDownListChange():void {
           updateUI();
       }

       private function onLessonAndRoleDataGridSelectionChange():void {

       }

       private function onRoleSelectionModeDropDownListChange():void {
           updateUI();
       }

       private function onSaveScriptBrowseSelect(event:Event):void {
           var file:File = File(event.target);
           Utils_File.writeTextFile(file, scriptDisplayTextArea.text);
       }

       private function onSaveScriptButtonClick():void {
           var fileName:String;
           switch (_selectedScriptType) {
               case Constants_ProductionScript.SCRIPT_TYPE__AUDIO_CHECKING_AND_EDITING:
               case Constants_ProductionScript.SCRIPT_TYPE__AUDIO_RECORDING:
                   fileName =
                           _selectedVoiceTalent.name_Family +
                           "_" +
                           _selectedVoiceTalent.name_Given +
                           "_" +
                           Utils_DateTime.getCurrentDateIn_YYYYMMDD_Format();
                   break;
               case Constants_ProductionScript.SCRIPT_TYPE__FINAL_ALPHA_CHECK:
                   fileName = Utils_DateTime.getCurrentDateTimeIn_YYYYMMDD_HHMMSS_Format();
                   break;
               default:
                   Log.error("View_CreateProductionScripts.onSaveScriptButtonClick(): No case for: " + _selectedScriptType);
           }
           fileName +=
                   Constants_ProductionScript.getFileNameSuffixForScriptType(_selectedScriptType) +
                   ".txt";
           var f:File = new File();
           f.nativePath = model.productionScriptFolderPath;
           f = f.resolvePath(fileName);
           f.addEventListener(Event.SELECT, onSaveScriptBrowseSelect);
           f.browseForSave("Save Production Script");
       }

       private function onScriptTypeDropDownListChange():void {
           updateUI();
       }

       private function onShowProblematicLessonsCheckBoxChange():void {
           updateUI();
       }

       private function onVoiceTalentDropDownListChange():void {
           updateUI();
       }

       private function refreshLessonAndRoleDataGridColumns():void {
           var columnArray:Array;
           var checkboxColumn:GridColumn;
           checkboxColumn = new GridColumn();
           checkboxColumn.itemRenderer = new ClassFactory(ItemRenderer_Grid_SelectableCheckbox);
           checkboxColumn.headerText = "";
           checkboxColumn.width = 30;
           var lessonIdColumn:GridColumn;
           lessonIdColumn = new GridColumn();
           lessonIdColumn.dataField = "lessonId";
           lessonIdColumn.headerText = "Lesson ID";
           lessonIdColumn.width = 400;
           if (_selectedRoleSelectionMode == Constants_ProductionScript.ROLE_SELECTION_MODE__SELECTED_ROLES_FOR_EACH_LESSON) {
               var roleColumn:GridColumn;
               roleColumn = new GridColumn();
               roleColumn.labelFunction = labelFunction_RoleColumn;
               roleColumn.headerText = "Role";
               roleColumn.width = 170;
               columnArray = [lessonIdColumn, checkboxColumn, roleColumn];
           } else {
               columnArray = [checkboxColumn, lessonIdColumn];
           }
           lessonAndRoleDataGrid.columns = new ArrayCollection(columnArray);
       }

       private function refreshLessonAndRoleDataGridDataProvider():void {
           // TODO - deal with the case where we're refreshing after fixing a script problem, or making some other change - we want to
           // TODO - keep 'selected' - anything else?
           // TODO - only display lessons w/ current selected native and target language
           var dataArray:Array = [];
           for each (var lessonDevFolder:LessonDevFolder in _currentLessonDevFolderList) {
               var createItemForEachLesson:Boolean = false;
               var createItemForEachRoleInLesson:Boolean = false;
               if (lessonDevFolder.doesProblemFreeScriptFileExist()) {
                   if (_selectedRoleSelectionMode == Constants_ProductionScript.ROLE_SELECTION_MODE__SELECTED_ROLES_FOR_EACH_LESSON) {
                       createItemForEachRoleInLesson = true;
                   } else {
                       createItemForEachLesson = true;
                   }
               } else {
                   if (showProblematicLessonsCheckBox.selected) {
                       createItemForEachLesson = true;
                   }
               }
               var listItem:ProductionScriptLessonOrRoleItem;
               if (createItemForEachLesson) {
                   listItem = new ProductionScriptLessonOrRoleItem();
                   listItem.lessonDevFolder = lessonDevFolder;
                   dataArray.push(listItem);
               }
               if (createItemForEachRoleInLesson) {
                   for each (var roleName:String in lessonDevFolder.roleList) {
                       listItem = new ProductionScriptLessonOrRoleItem();
                       listItem.lessonDevFolder = lessonDevFolder;
                       listItem.roleName = roleName;
                       dataArray.push(listItem);
                   }
               }

           }
           _lessonAndRoleDataGridDataProvider = new ArrayCollection(dataArray);
           var sort:Sort = new Sort();
           sort.fields = [new SortField("lessonId")];
           _lessonAndRoleDataGridDataProvider.sort = sort;
           _lessonAndRoleDataGridDataProvider.refresh();
       }

       public function setLessonAndRoleDataGridWidth():void {
           var gridWidth:uint = 0;
           for each (var column:GridColumn in lessonAndRoleDataGrid.columns) {
               gridWidth += column.width;
           }
           lessonAndRoleDataGrid.width = gridWidth;
       }

       private function updateCurrentLessonDevFolderList():void {
           callLater(updateCurrentLessonDevFolderList_Continued);
       }

      private function updateCurrentLessonDevFolderList_Continued():void {
         _currentLessonDevFolderList = model.currentLessonDevFolderList;
         updateUI();
      }

       private function updateUI():void {
           mainGroup.visible = true;
           scriptDisplayTopButtonGroup.visible = false;
           dataGridGroup.visible = false;
           scriptDisplayTextArea.visible = false;
           var userChoicesAllowGridDisplay:Boolean = false;
           if (_selectedScriptType) {
               switch (_selectedScriptType) {
                   case Constants_ProductionScript.SCRIPT_TYPE__AUDIO_CHECKING_AND_EDITING:
                       languageDropDownList.prompt = "";
                       languageDropDownList.selectedIndex = -1;
                       languageDropDownListFormItem.visible = false;
                       languageDropDownListFormItem.includeInLayout = false;
                       roleSelectionModeDropDownList.prompt = "Select a role selection mode ...";
                       roleSelectionModeDropDownListFormItem.visible = true;
                       roleSelectionModeDropDownListFormItem.includeInLayout = true;
                       voiceTalentDropDownList.prompt = "Select a voice talent ...";
                       voiceTalentDropDownListFormItem.visible = true;
                       voiceTalentDropDownListFormItem.includeInLayout = true;
                       if ((_selectedRoleSelectionMode) && (_selectedVoiceTalent)) {
                           userChoicesAllowGridDisplay = true;
                       }
                       break;
                   case Constants_ProductionScript.SCRIPT_TYPE__AUDIO_RECORDING:
                       languageDropDownList.prompt = "Select a language ...";
                       languageDropDownListFormItem.visible = true;
                       languageDropDownListFormItem.includeInLayout = true;
                       roleSelectionModeDropDownList.prompt = "Select a role selection mode ...";
                       roleSelectionModeDropDownListFormItem.visible = true;
                       roleSelectionModeDropDownListFormItem.includeInLayout = true;
                       voiceTalentDropDownList.prompt = "Select a voice talent ...";
                       voiceTalentDropDownListFormItem.visible = true;
                       voiceTalentDropDownListFormItem.includeInLayout = true;
                       if ((_selectedLanguageIso639_3Code) && (_selectedRoleSelectionMode) && (_selectedVoiceTalent)) {
                           userChoicesAllowGridDisplay = true;
                       }
                       break;
                   case Constants_ProductionScript.SCRIPT_TYPE__FINAL_ALPHA_CHECK:
                       languageDropDownList.prompt = "";
                       languageDropDownList.selectedIndex = -1;
                       languageDropDownListFormItem.visible = false;
                       languageDropDownListFormItem.includeInLayout = false;
                       roleSelectionModeDropDownList.prompt = "";
                       roleSelectionModeDropDownList.selectedIndex = -1;
                       roleSelectionModeDropDownListFormItem.visible = false;
                       roleSelectionModeDropDownListFormItem.includeInLayout = false;
                       voiceTalentDropDownList.prompt = "";
                       voiceTalentDropDownList.selectedIndex = -1;
                       voiceTalentDropDownListFormItem.visible = false;
                       voiceTalentDropDownListFormItem.includeInLayout = false;
                       userChoicesAllowGridDisplay = true;
                       break;
                   default:
                       Log.error("View_CreateProductionScripts.updateUI(): No case for script type of :" + _selectedScriptType);
               }
               retainSelectionsCheckBoxFormItem.visible = true;
               retainSelectionsCheckBoxFormItem.includeInLayout = true;
           } else {
               languageDropDownList.prompt = "";
               languageDropDownList.selectedIndex = -1;
               languageDropDownListFormItem.visible = false;
               languageDropDownListFormItem.includeInLayout = false;
               retainSelectionsCheckBox.selected = false;
               retainSelectionsCheckBoxFormItem.visible = false;
               retainSelectionsCheckBoxFormItem.includeInLayout = false;
               roleSelectionModeDropDownList.prompt = "";
               roleSelectionModeDropDownList.selectedIndex = -1;
               roleSelectionModeDropDownListFormItem.visible = false;
               roleSelectionModeDropDownListFormItem.includeInLayout = false;
               voiceTalentDropDownList.prompt = "";
               voiceTalentDropDownList.selectedIndex = -1;
               voiceTalentDropDownListFormItem.visible = false;
               voiceTalentDropDownListFormItem.includeInLayout = false;
           }
           if (userChoicesAllowGridDisplay && (_currentLessonDevFolderList)) {
               dataGridGroup.visible = true;
               scriptDisplayTopButtonGroup.visible = true;
               scriptDisplayTextArea.visible = true;
               refreshLessonAndRoleDataGridColumns();
               if (!((retainSelectionsCheckBox.selected) && (_selectedRoleSelectionMode == _previousSelectedRoleSelectionMode))) {
                   refreshLessonAndRoleDataGridDataProvider();
               }
               setLessonAndRoleDataGridWidth();
           } else {
               scriptDisplayTextArea.text = "";
           }
           _previousSelectedLanguageIso639_3Code = _selectedLanguageIso639_3Code;
           _previousSelectedRoleSelectionMode = _selectedRoleSelectionMode;
           _previousSelectedScriptType = _selectedScriptType;
           _previousSelectedVoiceTalent = _selectedVoiceTalent;
           invalidateDisplayList();
       }
       ]]>
   </fx:Script>

   <s:HGroup id = "mainGroup"
             height = "100%"
             visible = "false"
             width = "100%">
      <s:VGroup id = "leftGroup"
                height = "100%"
                width = "600">
         <s:Spacer />
         <mx:Form width = "550"
                  labelWidth="200">
            <mx:FormItem label = "Script Type">
               <s:DropDownList id = "scriptTypeDropDownList"
                               change = "onScriptTypeDropDownListChange()"
                               prompt = "Select a script type..."
                               width = "250" />
            </mx:FormItem>
            <mx:FormItem id = "languageDropDownListFormItem"
                         label = "Language">
               <s:DropDownList id = "languageDropDownList"
                               change = "onLanguageDropDownListChange()"
                               width = "250" />
            </mx:FormItem>
            <mx:FormItem id = "roleSelectionModeDropDownListFormItem"
                         label = "Role Selection Mode">
               <s:DropDownList id = "roleSelectionModeDropDownList"
                               change = "onRoleSelectionModeDropDownListChange()"
                               width = "250" />
            </mx:FormItem>
            <mx:FormItem id = "voiceTalentDropDownListFormItem"
                         label = "Voice Talent">
               <s:DropDownList id = "voiceTalentDropDownList"
                               change = "onVoiceTalentDropDownListChange()"
                               width = "250" />
            </mx:FormItem>
            <mx:FormItem id = "retainSelectionsCheckBoxFormItem"
                         label = "Retain Selections">
               <s:CheckBox id = "retainSelectionsCheckBox" />
            </mx:FormItem>
         </mx:Form>
         <s:Spacer />
         <s:VGroup id = "dataGridGroup"
                   height = "100%"
                   visible = "false"
                   width = "600">
            <s:DataGrid id = "lessonAndRoleDataGrid"
                        selectionChange = "onLessonAndRoleDataGridSelectionChange()"
                        dataProvider = "{_lessonAndRoleDataGridDataProvider}"
                        height = "100%"
                        horizontalScrollPolicy = "off"
                        width = "100%" />
            <s:CheckBox id = "showProblematicLessonsCheckBox"
                        change = "onShowProblematicLessonsCheckBoxChange()"
                        label = "Show lessons with missing or incorrect scripts" />
         </s:VGroup>
      </s:VGroup>
      <s:Spacer width = "25" />
      <s:VGroup height = "100%"
                width = "100%">
         <s:Spacer height = "8" />
         <s:HGroup id="scriptDisplayTopButtonGroup">
            <s:Button id = "createScriptButton"
                      label = "Create Script"
                      click = "onCreateScriptButtonClick()" />
            <s:Button id = "saveScriptButton"
                      label = "Save Script"
                      click = "onSaveScriptButtonClick()" />
         </s:HGroup>
         <s:Spacer height = "8" />
         <s:TextArea id = "scriptDisplayTextArea"
                     editable = "false"
                     height = "100%"
                     width = "100%" />
      </s:VGroup>
   </s:HGroup>
</view:ViewBase>
